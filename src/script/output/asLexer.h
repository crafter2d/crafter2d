/** \file
 *  This C header file was generated by $ANTLR version 3.3 Nov 30, 2010 12:45:30
 *
 *     -  From the grammar source file : D:\\Development\\jengine sse\\branches\\jscript\\src\\script\\as.g
 *     -                            On : 2011-05-08 13:55:03
 *     -                 for the lexer : asLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer asLexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pasLexer, which is returned from a call to asLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in pasLexer are  as follows:
 *
 *  -  void      pasLexer->T__113(pasLexer)
 *  -  void      pasLexer->T__114(pasLexer)
 *  -  void      pasLexer->T__115(pasLexer)
 *  -  void      pasLexer->T__116(pasLexer)
 *  -  void      pasLexer->T__117(pasLexer)
 *  -  void      pasLexer->T__118(pasLexer)
 *  -  void      pasLexer->T__119(pasLexer)
 *  -  void      pasLexer->T__120(pasLexer)
 *  -  void      pasLexer->T__121(pasLexer)
 *  -  void      pasLexer->T__122(pasLexer)
 *  -  void      pasLexer->T__123(pasLexer)
 *  -  void      pasLexer->T__124(pasLexer)
 *  -  void      pasLexer->T__125(pasLexer)
 *  -  void      pasLexer->PACKAGE(pasLexer)
 *  -  void      pasLexer->USE(pasLexer)
 *  -  void      pasLexer->CLASS(pasLexer)
 *  -  void      pasLexer->INTRFACE(pasLexer)
 *  -  void      pasLexer->SUPER(pasLexer)
 *  -  void      pasLexer->THIS(pasLexer)
 *  -  void      pasLexer->EXTENDS(pasLexer)
 *  -  void      pasLexer->IMPL(pasLexer)
 *  -  void      pasLexer->NEW(pasLexer)
 *  -  void      pasLexer->INST_OF(pasLexer)
 *  -  void      pasLexer->T_ASSERT(pasLexer)
 *  -  void      pasLexer->FOR(pasLexer)
 *  -  void      pasLexer->FOREACH(pasLexer)
 *  -  void      pasLexer->WHILE(pasLexer)
 *  -  void      pasLexer->DO(pasLexer)
 *  -  void      pasLexer->SWITCH(pasLexer)
 *  -  void      pasLexer->CASE(pasLexer)
 *  -  void      pasLexer->DEFAULT(pasLexer)
 *  -  void      pasLexer->BREAK(pasLexer)
 *  -  void      pasLexer->CONTINUE(pasLexer)
 *  -  void      pasLexer->RETURN(pasLexer)
 *  -  void      pasLexer->IF(pasLexer)
 *  -  void      pasLexer->ELSE(pasLexer)
 *  -  void      pasLexer->TRY(pasLexer)
 *  -  void      pasLexer->CATCH(pasLexer)
 *  -  void      pasLexer->FINALLY(pasLexer)
 *  -  void      pasLexer->THROW(pasLexer)
 *  -  void      pasLexer->LITNULL(pasLexer)
 *  -  void      pasLexer->LITTRUE(pasLexer)
 *  -  void      pasLexer->LITFALSE(pasLexer)
 *  -  void      pasLexer->AND(pasLexer)
 *  -  void      pasLexer->OR(pasLexer)
 *  -  void      pasLexer->MUL(pasLexer)
 *  -  void      pasLexer->DIV(pasLexer)
 *  -  void      pasLexer->REM(pasLexer)
 *  -  void      pasLexer->PLUS(pasLexer)
 *  -  void      pasLexer->MINUS(pasLexer)
 *  -  void      pasLexer->BITCOMPL(pasLexer)
 *  -  void      pasLexer->NOT(pasLexer)
 *  -  void      pasLexer->BITAND(pasLexer)
 *  -  void      pasLexer->BITOR(pasLexer)
 *  -  void      pasLexer->BITXOR(pasLexer)
 *  -  void      pasLexer->INCR(pasLexer)
 *  -  void      pasLexer->DECR(pasLexer)
 *  -  void      pasLexer->EQUAL(pasLexer)
 *  -  void      pasLexer->UNEQUAL(pasLexer)
 *  -  void      pasLexer->SEQUAL(pasLexer)
 *  -  void      pasLexer->SMALLER(pasLexer)
 *  -  void      pasLexer->GREATER(pasLexer)
 *  -  void      pasLexer->GEQUAL(pasLexer)
 *  -  void      pasLexer->SHIFTL(pasLexer)
 *  -  void      pasLexer->SHIFTR(pasLexer)
 *  -  void      pasLexer->T_CHAR(pasLexer)
 *  -  void      pasLexer->T_INT(pasLexer)
 *  -  void      pasLexer->T_REAL(pasLexer)
 *  -  void      pasLexer->T_STRING(pasLexer)
 *  -  void      pasLexer->T_BOOL(pasLexer)
 *  -  void      pasLexer->T_VOID(pasLexer)
 *  -  void      pasLexer->STATIC(pasLexer)
 *  -  void      pasLexer->FINAL(pasLexer)
 *  -  void      pasLexer->ABSTRACT(pasLexer)
 *  -  void      pasLexer->NATIVE(pasLexer)
 *  -  void      pasLexer->SYNC(pasLexer)
 *  -  void      pasLexer->PUBLIC(pasLexer)
 *  -  void      pasLexer->PROT(pasLexer)
 *  -  void      pasLexer->PRIVATE(pasLexer)
 *  -  void      pasLexer->SEP(pasLexer)
 *  -  void      pasLexer->ID(pasLexer)
 *  -  void      pasLexer->INT(pasLexer)
 *  -  void      pasLexer->FLOAT(pasLexer)
 *  -  void      pasLexer->WHITESPACE(pasLexer)
 *  -  void      pasLexer->STRING(pasLexer)
 *  -  void      pasLexer->CHAR(pasLexer)
 *  -  void      pasLexer->COMMENT(pasLexer)
 *  -  void      pasLexer->LINE_COMMENT(pasLexer)
 *  -  void      pasLexer->EXPONENT(pasLexer)
 *  -  void      pasLexer->HEX_DIGIT(pasLexer)
 *  -  void      pasLexer->ESC_SEQ(pasLexer)
 *  -  void      pasLexer->OCTAL_ESC(pasLexer)
 *  -  void      pasLexer->UNICODE_ESC(pasLexer)
 *  -  void      pasLexer->Tokens(pasLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_asLexer_H
#define _asLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct asLexer_Ctx_struct asLexer, * pasLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for asLexer
 */
struct asLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mT__113)	(struct asLexer_Ctx_struct * ctx);
     void (*mT__114)	(struct asLexer_Ctx_struct * ctx);
     void (*mT__115)	(struct asLexer_Ctx_struct * ctx);
     void (*mT__116)	(struct asLexer_Ctx_struct * ctx);
     void (*mT__117)	(struct asLexer_Ctx_struct * ctx);
     void (*mT__118)	(struct asLexer_Ctx_struct * ctx);
     void (*mT__119)	(struct asLexer_Ctx_struct * ctx);
     void (*mT__120)	(struct asLexer_Ctx_struct * ctx);
     void (*mT__121)	(struct asLexer_Ctx_struct * ctx);
     void (*mT__122)	(struct asLexer_Ctx_struct * ctx);
     void (*mT__123)	(struct asLexer_Ctx_struct * ctx);
     void (*mT__124)	(struct asLexer_Ctx_struct * ctx);
     void (*mT__125)	(struct asLexer_Ctx_struct * ctx);
     void (*mPACKAGE)	(struct asLexer_Ctx_struct * ctx);
     void (*mUSE)	(struct asLexer_Ctx_struct * ctx);
     void (*mCLASS)	(struct asLexer_Ctx_struct * ctx);
     void (*mINTRFACE)	(struct asLexer_Ctx_struct * ctx);
     void (*mSUPER)	(struct asLexer_Ctx_struct * ctx);
     void (*mTHIS)	(struct asLexer_Ctx_struct * ctx);
     void (*mEXTENDS)	(struct asLexer_Ctx_struct * ctx);
     void (*mIMPL)	(struct asLexer_Ctx_struct * ctx);
     void (*mNEW)	(struct asLexer_Ctx_struct * ctx);
     void (*mINST_OF)	(struct asLexer_Ctx_struct * ctx);
     void (*mT_ASSERT)	(struct asLexer_Ctx_struct * ctx);
     void (*mFOR)	(struct asLexer_Ctx_struct * ctx);
     void (*mFOREACH)	(struct asLexer_Ctx_struct * ctx);
     void (*mWHILE)	(struct asLexer_Ctx_struct * ctx);
     void (*mDO)	(struct asLexer_Ctx_struct * ctx);
     void (*mSWITCH)	(struct asLexer_Ctx_struct * ctx);
     void (*mCASE)	(struct asLexer_Ctx_struct * ctx);
     void (*mDEFAULT)	(struct asLexer_Ctx_struct * ctx);
     void (*mBREAK)	(struct asLexer_Ctx_struct * ctx);
     void (*mCONTINUE)	(struct asLexer_Ctx_struct * ctx);
     void (*mRETURN)	(struct asLexer_Ctx_struct * ctx);
     void (*mIF)	(struct asLexer_Ctx_struct * ctx);
     void (*mELSE)	(struct asLexer_Ctx_struct * ctx);
     void (*mTRY)	(struct asLexer_Ctx_struct * ctx);
     void (*mCATCH)	(struct asLexer_Ctx_struct * ctx);
     void (*mFINALLY)	(struct asLexer_Ctx_struct * ctx);
     void (*mTHROW)	(struct asLexer_Ctx_struct * ctx);
     void (*mLITNULL)	(struct asLexer_Ctx_struct * ctx);
     void (*mLITTRUE)	(struct asLexer_Ctx_struct * ctx);
     void (*mLITFALSE)	(struct asLexer_Ctx_struct * ctx);
     void (*mAND)	(struct asLexer_Ctx_struct * ctx);
     void (*mOR)	(struct asLexer_Ctx_struct * ctx);
     void (*mMUL)	(struct asLexer_Ctx_struct * ctx);
     void (*mDIV)	(struct asLexer_Ctx_struct * ctx);
     void (*mREM)	(struct asLexer_Ctx_struct * ctx);
     void (*mPLUS)	(struct asLexer_Ctx_struct * ctx);
     void (*mMINUS)	(struct asLexer_Ctx_struct * ctx);
     void (*mBITCOMPL)	(struct asLexer_Ctx_struct * ctx);
     void (*mNOT)	(struct asLexer_Ctx_struct * ctx);
     void (*mBITAND)	(struct asLexer_Ctx_struct * ctx);
     void (*mBITOR)	(struct asLexer_Ctx_struct * ctx);
     void (*mBITXOR)	(struct asLexer_Ctx_struct * ctx);
     void (*mINCR)	(struct asLexer_Ctx_struct * ctx);
     void (*mDECR)	(struct asLexer_Ctx_struct * ctx);
     void (*mEQUAL)	(struct asLexer_Ctx_struct * ctx);
     void (*mUNEQUAL)	(struct asLexer_Ctx_struct * ctx);
     void (*mSEQUAL)	(struct asLexer_Ctx_struct * ctx);
     void (*mSMALLER)	(struct asLexer_Ctx_struct * ctx);
     void (*mGREATER)	(struct asLexer_Ctx_struct * ctx);
     void (*mGEQUAL)	(struct asLexer_Ctx_struct * ctx);
     void (*mSHIFTL)	(struct asLexer_Ctx_struct * ctx);
     void (*mSHIFTR)	(struct asLexer_Ctx_struct * ctx);
     void (*mT_CHAR)	(struct asLexer_Ctx_struct * ctx);
     void (*mT_INT)	(struct asLexer_Ctx_struct * ctx);
     void (*mT_REAL)	(struct asLexer_Ctx_struct * ctx);
     void (*mT_STRING)	(struct asLexer_Ctx_struct * ctx);
     void (*mT_BOOL)	(struct asLexer_Ctx_struct * ctx);
     void (*mT_VOID)	(struct asLexer_Ctx_struct * ctx);
     void (*mSTATIC)	(struct asLexer_Ctx_struct * ctx);
     void (*mFINAL)	(struct asLexer_Ctx_struct * ctx);
     void (*mABSTRACT)	(struct asLexer_Ctx_struct * ctx);
     void (*mNATIVE)	(struct asLexer_Ctx_struct * ctx);
     void (*mSYNC)	(struct asLexer_Ctx_struct * ctx);
     void (*mPUBLIC)	(struct asLexer_Ctx_struct * ctx);
     void (*mPROT)	(struct asLexer_Ctx_struct * ctx);
     void (*mPRIVATE)	(struct asLexer_Ctx_struct * ctx);
     void (*mSEP)	(struct asLexer_Ctx_struct * ctx);
     void (*mID)	(struct asLexer_Ctx_struct * ctx);
     void (*mINT)	(struct asLexer_Ctx_struct * ctx);
     void (*mFLOAT)	(struct asLexer_Ctx_struct * ctx);
     void (*mWHITESPACE)	(struct asLexer_Ctx_struct * ctx);
     void (*mSTRING)	(struct asLexer_Ctx_struct * ctx);
     void (*mCHAR)	(struct asLexer_Ctx_struct * ctx);
     void (*mCOMMENT)	(struct asLexer_Ctx_struct * ctx);
     void (*mLINE_COMMENT)	(struct asLexer_Ctx_struct * ctx);
     void (*mEXPONENT)	(struct asLexer_Ctx_struct * ctx);
     void (*mHEX_DIGIT)	(struct asLexer_Ctx_struct * ctx);
     void (*mESC_SEQ)	(struct asLexer_Ctx_struct * ctx);
     void (*mOCTAL_ESC)	(struct asLexer_Ctx_struct * ctx);
     void (*mUNICODE_ESC)	(struct asLexer_Ctx_struct * ctx);
     void (*mTokens)	(struct asLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct asLexer_Ctx_struct * ctx);
    void	    (*free)   (struct asLexer_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pasLexer asLexerNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API pasLexer asLexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EOF      -1
#define T__113      113
#define T__114      114
#define T__115      115
#define T__116      116
#define T__117      117
#define T__118      118
#define T__119      119
#define T__120      120
#define T__121      121
#define T__122      122
#define T__123      123
#define T__124      124
#define T__125      125
#define IFACE_MEMBER      4
#define IFACE_VOID_MEMBER      5
#define TYPEINFOS      6
#define TYPEINFO      7
#define COMPOUNT      8
#define BLOCK      9
#define MODIFIERS      10
#define CONSTRUCTOR_DECL      11
#define FUNCTION_DECL      12
#define FUNCTION_ARGUMENTS      13
#define VOID_FUNCDECL      14
#define VARIABLE_DECL      15
#define LOCALVARDECL      16
#define STMT_EXPR      17
#define CAST      18
#define ACCESS      19
#define ARRAYACCESS      20
#define CLASSACCESS      21
#define FOR_INIT      22
#define LITERAL      23
#define EXPRESSION      24
#define UNARY      25
#define TYPE      26
#define TYPELIST      27
#define TYPEARGUMENT      28
#define ARGUMENTS      29
#define ARRAYARGUMENTS      30
#define ANNOTATIONS      31
#define ANNOTATION      32
#define PACKAGE      33
#define USE      34
#define CLASS      35
#define EXTENDS      36
#define IMPL      37
#define T_VOID      38
#define INTRFACE      39
#define SUPER      40
#define STATIC      41
#define FINAL      42
#define NATIVE      43
#define ABSTRACT      44
#define PUBLIC      45
#define PRIVATE      46
#define PROT      47
#define IF      48
#define ELSE      49
#define FOR      50
#define FOREACH      51
#define WHILE      52
#define DO      53
#define SWITCH      54
#define RETURN      55
#define TRY      56
#define THROW      57
#define T_ASSERT      58
#define BREAK      59
#define CONTINUE      60
#define SEP      61
#define CATCH      62
#define FINALLY      63
#define CASE      64
#define DEFAULT      65
#define OR      66
#define AND      67
#define BITOR      68
#define BITXOR      69
#define BITAND      70
#define INST_OF      71
#define EQUAL      72
#define UNEQUAL      73
#define SEQUAL      74
#define SMALLER      75
#define GREATER      76
#define GEQUAL      77
#define SHIFTL      78
#define SHIFTR      79
#define PLUS      80
#define MINUS      81
#define MUL      82
#define DIV      83
#define REM      84
#define NOT      85
#define BITCOMPL      86
#define NEW      87
#define THIS      88
#define T_CHAR      89
#define T_INT      90
#define T_REAL      91
#define T_STRING      92
#define T_BOOL      93
#define STRING      94
#define CHAR      95
#define LITNULL      96
#define INT      97
#define FLOAT      98
#define LITTRUE      99
#define LITFALSE      100
#define ID      101
#define INCR      102
#define DECR      103
#define SYNC      104
#define EXPONENT      105
#define WHITESPACE      106
#define ESC_SEQ      107
#define COMMENT      108
#define LINE_COMMENT      109
#define HEX_DIGIT      110
#define UNICODE_ESC      111
#define OCTAL_ESC      112
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for asLexer
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
