/** \file
 *  This C header file was generated by $ANTLR version 3.3 Nov 30, 2010 12:45:30
 *
 *     -  From the grammar source file : D:\\Development\\armybuilder\\src\\armyscript\\as.g
 *     -                            On : 2011-04-25 15:01:07
 *     -                for the parser : asParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser asParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pasParser, which is returned from a call to asParserNew().
 *
 * The methods in pasParser are  as follows:
 *
 *  - asParser_script_return      pasParser->script(pasParser)
 *  - asParser_declaration_return      pasParser->declaration(pasParser)
 *  - asParser_package_decl_return      pasParser->package_decl(pasParser)
 *  - asParser_use_decl_return      pasParser->use_decl(pasParser)
 *  - asParser_type_decl_return      pasParser->type_decl(pasParser)
 *  - asParser_class_decl_return      pasParser->class_decl(pasParser)
 *  - asParser_class_inheritance_return      pasParser->class_inheritance(pasParser)
 *  - asParser_class_member_return      pasParser->class_member(pasParser)
 *  - asParser_class_var_decl_return      pasParser->class_var_decl(pasParser)
 *  - asParser_class_func_decl_return      pasParser->class_func_decl(pasParser)
 *  - asParser_member_decl_rest_return      pasParser->member_decl_rest(pasParser)
 *  - asParser_interface_decl_return      pasParser->interface_decl(pasParser)
 *  - asParser_iface_inheritance_return      pasParser->iface_inheritance(pasParser)
 *  - asParser_iface_member_return      pasParser->iface_member(pasParser)
 *  - asParser_iface_func_field_return      pasParser->iface_func_field(pasParser)
 *  - asParser_typeinfos_return      pasParser->typeinfos(pasParser)
 *  - asParser_typeinfo_return      pasParser->typeinfo(pasParser)
 *  - asParser_func_arguments_return      pasParser->func_arguments(pasParser)
 *  - asParser_func_arg_decl_return      pasParser->func_arg_decl(pasParser)
 *  - asParser_variables_decl_return      pasParser->variables_decl(pasParser)
 *  - asParser_modifiers_return      pasParser->modifiers(pasParser)
 *  - asParser_modifier_return      pasParser->modifier(pasParser)
 *  - asParser_annotations_return      pasParser->annotations(pasParser)
 *  - asParser_annotation_return      pasParser->annotation(pasParser)
 *  - asParser_annotation_arguments_return      pasParser->annotation_arguments(pasParser)
 *  - asParser_block_return      pasParser->block(pasParser)
 *  - asParser_block_stmt_return      pasParser->block_stmt(pasParser)
 *  - asParser_stmt_return      pasParser->stmt(pasParser)
 *  - asParser_for_declaration_return      pasParser->for_declaration(pasParser)
 *  - asParser_for_init_return      pasParser->for_init(pasParser)
 *  - asParser_catch_block_return      pasParser->catch_block(pasParser)
 *  - asParser_finally_block_return      pasParser->finally_block(pasParser)
 *  - asParser_switch_body_return      pasParser->switch_body(pasParser)
 *  - asParser_switch_case_return      pasParser->switch_case(pasParser)
 *  - asParser_local_var_decl_return      pasParser->local_var_decl(pasParser)
 *  - asParser_stmt_expression_return      pasParser->stmt_expression(pasParser)
 *  - asParser_compound_expression_return      pasParser->compound_expression(pasParser)
 *  - asParser_expression_list_return      pasParser->expression_list(pasParser)
 *  - asParser_expression_return      pasParser->expression(pasParser)
 *  - asParser_assignment_operator_return      pasParser->assignment_operator(pasParser)
 *  - asParser_or_expression_return      pasParser->or_expression(pasParser)
 *  - asParser_and_expression_return      pasParser->and_expression(pasParser)
 *  - asParser_bit_or_expression_return      pasParser->bit_or_expression(pasParser)
 *  - asParser_bit_xor_expression_return      pasParser->bit_xor_expression(pasParser)
 *  - asParser_bit_and_expression_return      pasParser->bit_and_expression(pasParser)
 *  - asParser_instanceof_expression_return      pasParser->instanceof_expression(pasParser)
 *  - asParser_equal_expression_return      pasParser->equal_expression(pasParser)
 *  - asParser_relational_expression_return      pasParser->relational_expression(pasParser)
 *  - asParser_relational_operator_return      pasParser->relational_operator(pasParser)
 *  - asParser_shift_expression_return      pasParser->shift_expression(pasParser)
 *  - asParser_additive_expression_return      pasParser->additive_expression(pasParser)
 *  - asParser_multiplicative_expression_return      pasParser->multiplicative_expression(pasParser)
 *  - asParser_unary_expression_return      pasParser->unary_expression(pasParser)
 *  - asParser_unary_pre_operator_return      pasParser->unary_pre_operator(pasParser)
 *  - asParser_unary_post_oparator_return      pasParser->unary_post_oparator(pasParser)
 *  - asParser_primary_return      pasParser->primary(pasParser)
 *  - asParser_selector_return      pasParser->selector(pasParser)
 *  - asParser_new_name_return      pasParser->new_name(pasParser)
 *  - asParser_new_arguments_return      pasParser->new_arguments(pasParser)
 *  - asParser_array_argument_return      pasParser->array_argument(pasParser)
 *  - asParser_array_initializer_return      pasParser->array_initializer(pasParser)
 *  - asParser_arguments_return      pasParser->arguments(pasParser)
 *  - asParser_type_list_return      pasParser->type_list(pasParser)
 *  - asParser_type_return      pasParser->type(pasParser)
 *  - asParser_type_argument_return      pasParser->type_argument(pasParser)
 *  - asParser_array_decl_return      pasParser->array_decl(pasParser)
 *  - asParser_basictype_return      pasParser->basictype(pasParser)
 *  - asParser_literal_return      pasParser->literal(pasParser)
 *  - asParser_numeric_literal_return      pasParser->numeric_literal(pasParser)
 *  - asParser_boolean_literal_return      pasParser->boolean_literal(pasParser)
 *  - asParser_identifier_return      pasParser->identifier(pasParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_asParser_H
#define _asParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct asParser_Ctx_struct asParser, * pasParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct asParser_script_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_script_return;

typedef struct asParser_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_declaration_return;

typedef struct asParser_package_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_package_decl_return;

typedef struct asParser_use_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_use_decl_return;

typedef struct asParser_type_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_type_decl_return;

typedef struct asParser_class_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_class_decl_return;

typedef struct asParser_class_inheritance_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_class_inheritance_return;

typedef struct asParser_class_member_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_class_member_return;

typedef struct asParser_class_var_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_class_var_decl_return;

typedef struct asParser_class_func_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_class_func_decl_return;

typedef struct asParser_member_decl_rest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_member_decl_rest_return;

typedef struct asParser_interface_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_interface_decl_return;

typedef struct asParser_iface_inheritance_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_iface_inheritance_return;

typedef struct asParser_iface_member_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_iface_member_return;

typedef struct asParser_iface_func_field_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_iface_func_field_return;

typedef struct asParser_typeinfos_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_typeinfos_return;

typedef struct asParser_typeinfo_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_typeinfo_return;

typedef struct asParser_func_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_func_arguments_return;

typedef struct asParser_func_arg_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_func_arg_decl_return;

typedef struct asParser_variables_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_variables_decl_return;

typedef struct asParser_modifiers_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_modifiers_return;

typedef struct asParser_modifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_modifier_return;

typedef struct asParser_annotations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_annotations_return;

typedef struct asParser_annotation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_annotation_return;

typedef struct asParser_annotation_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_annotation_arguments_return;

typedef struct asParser_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_block_return;

typedef struct asParser_block_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_block_stmt_return;

typedef struct asParser_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_stmt_return;

typedef struct asParser_for_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_for_declaration_return;

typedef struct asParser_for_init_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_for_init_return;

typedef struct asParser_catch_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_catch_block_return;

typedef struct asParser_finally_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_finally_block_return;

typedef struct asParser_switch_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_switch_body_return;

typedef struct asParser_switch_case_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_switch_case_return;

typedef struct asParser_local_var_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_local_var_decl_return;

typedef struct asParser_stmt_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_stmt_expression_return;

typedef struct asParser_compound_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_compound_expression_return;

typedef struct asParser_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_expression_list_return;

typedef struct asParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_expression_return;

typedef struct asParser_assignment_operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_assignment_operator_return;

typedef struct asParser_or_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_or_expression_return;

typedef struct asParser_and_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_and_expression_return;

typedef struct asParser_bit_or_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_bit_or_expression_return;

typedef struct asParser_bit_xor_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_bit_xor_expression_return;

typedef struct asParser_bit_and_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_bit_and_expression_return;

typedef struct asParser_instanceof_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_instanceof_expression_return;

typedef struct asParser_equal_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_equal_expression_return;

typedef struct asParser_relational_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_relational_expression_return;

typedef struct asParser_relational_operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_relational_operator_return;

typedef struct asParser_shift_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_shift_expression_return;

typedef struct asParser_additive_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_additive_expression_return;

typedef struct asParser_multiplicative_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_multiplicative_expression_return;

typedef struct asParser_unary_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_unary_expression_return;

typedef struct asParser_unary_pre_operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_unary_pre_operator_return;

typedef struct asParser_unary_post_oparator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_unary_post_oparator_return;

typedef struct asParser_primary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_primary_return;

typedef struct asParser_selector_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_selector_return;

typedef struct asParser_new_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_new_name_return;

typedef struct asParser_new_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_new_arguments_return;

typedef struct asParser_array_argument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_array_argument_return;

typedef struct asParser_array_initializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_array_initializer_return;

typedef struct asParser_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_arguments_return;

typedef struct asParser_type_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_type_list_return;

typedef struct asParser_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_type_return;

typedef struct asParser_type_argument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_type_argument_return;

typedef struct asParser_array_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_array_decl_return;

typedef struct asParser_basictype_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_basictype_return;

typedef struct asParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_literal_return;

typedef struct asParser_numeric_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_numeric_literal_return;

typedef struct asParser_boolean_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_boolean_literal_return;

typedef struct asParser_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asParser_identifier_return;



/** Context tracking structure for asParser
 */
struct asParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     asParser_script_return (*script)	(struct asParser_Ctx_struct * ctx);
     asParser_declaration_return (*declaration)	(struct asParser_Ctx_struct * ctx);
     asParser_package_decl_return (*package_decl)	(struct asParser_Ctx_struct * ctx);
     asParser_use_decl_return (*use_decl)	(struct asParser_Ctx_struct * ctx);
     asParser_type_decl_return (*type_decl)	(struct asParser_Ctx_struct * ctx);
     asParser_class_decl_return (*class_decl)	(struct asParser_Ctx_struct * ctx);
     asParser_class_inheritance_return (*class_inheritance)	(struct asParser_Ctx_struct * ctx);
     asParser_class_member_return (*class_member)	(struct asParser_Ctx_struct * ctx);
     asParser_class_var_decl_return (*class_var_decl)	(struct asParser_Ctx_struct * ctx);
     asParser_class_func_decl_return (*class_func_decl)	(struct asParser_Ctx_struct * ctx);
     asParser_member_decl_rest_return (*member_decl_rest)	(struct asParser_Ctx_struct * ctx);
     asParser_interface_decl_return (*interface_decl)	(struct asParser_Ctx_struct * ctx);
     asParser_iface_inheritance_return (*iface_inheritance)	(struct asParser_Ctx_struct * ctx);
     asParser_iface_member_return (*iface_member)	(struct asParser_Ctx_struct * ctx);
     asParser_iface_func_field_return (*iface_func_field)	(struct asParser_Ctx_struct * ctx);
     asParser_typeinfos_return (*typeinfos)	(struct asParser_Ctx_struct * ctx);
     asParser_typeinfo_return (*typeinfo)	(struct asParser_Ctx_struct * ctx);
     asParser_func_arguments_return (*func_arguments)	(struct asParser_Ctx_struct * ctx);
     asParser_func_arg_decl_return (*func_arg_decl)	(struct asParser_Ctx_struct * ctx);
     asParser_variables_decl_return (*variables_decl)	(struct asParser_Ctx_struct * ctx);
     asParser_modifiers_return (*modifiers)	(struct asParser_Ctx_struct * ctx);
     asParser_modifier_return (*modifier)	(struct asParser_Ctx_struct * ctx);
     asParser_annotations_return (*annotations)	(struct asParser_Ctx_struct * ctx);
     asParser_annotation_return (*annotation)	(struct asParser_Ctx_struct * ctx);
     asParser_annotation_arguments_return (*annotation_arguments)	(struct asParser_Ctx_struct * ctx);
     asParser_block_return (*block)	(struct asParser_Ctx_struct * ctx);
     asParser_block_stmt_return (*block_stmt)	(struct asParser_Ctx_struct * ctx);
     asParser_stmt_return (*stmt)	(struct asParser_Ctx_struct * ctx);
     asParser_for_declaration_return (*for_declaration)	(struct asParser_Ctx_struct * ctx);
     asParser_for_init_return (*for_init)	(struct asParser_Ctx_struct * ctx);
     asParser_catch_block_return (*catch_block)	(struct asParser_Ctx_struct * ctx);
     asParser_finally_block_return (*finally_block)	(struct asParser_Ctx_struct * ctx);
     asParser_switch_body_return (*switch_body)	(struct asParser_Ctx_struct * ctx);
     asParser_switch_case_return (*switch_case)	(struct asParser_Ctx_struct * ctx);
     asParser_local_var_decl_return (*local_var_decl)	(struct asParser_Ctx_struct * ctx);
     asParser_stmt_expression_return (*stmt_expression)	(struct asParser_Ctx_struct * ctx);
     asParser_compound_expression_return (*compound_expression)	(struct asParser_Ctx_struct * ctx);
     asParser_expression_list_return (*expression_list)	(struct asParser_Ctx_struct * ctx);
     asParser_expression_return (*expression)	(struct asParser_Ctx_struct * ctx);
     asParser_assignment_operator_return (*assignment_operator)	(struct asParser_Ctx_struct * ctx);
     asParser_or_expression_return (*or_expression)	(struct asParser_Ctx_struct * ctx);
     asParser_and_expression_return (*and_expression)	(struct asParser_Ctx_struct * ctx);
     asParser_bit_or_expression_return (*bit_or_expression)	(struct asParser_Ctx_struct * ctx);
     asParser_bit_xor_expression_return (*bit_xor_expression)	(struct asParser_Ctx_struct * ctx);
     asParser_bit_and_expression_return (*bit_and_expression)	(struct asParser_Ctx_struct * ctx);
     asParser_instanceof_expression_return (*instanceof_expression)	(struct asParser_Ctx_struct * ctx);
     asParser_equal_expression_return (*equal_expression)	(struct asParser_Ctx_struct * ctx);
     asParser_relational_expression_return (*relational_expression)	(struct asParser_Ctx_struct * ctx);
     asParser_relational_operator_return (*relational_operator)	(struct asParser_Ctx_struct * ctx);
     asParser_shift_expression_return (*shift_expression)	(struct asParser_Ctx_struct * ctx);
     asParser_additive_expression_return (*additive_expression)	(struct asParser_Ctx_struct * ctx);
     asParser_multiplicative_expression_return (*multiplicative_expression)	(struct asParser_Ctx_struct * ctx);
     asParser_unary_expression_return (*unary_expression)	(struct asParser_Ctx_struct * ctx);
     asParser_unary_pre_operator_return (*unary_pre_operator)	(struct asParser_Ctx_struct * ctx);
     asParser_unary_post_oparator_return (*unary_post_oparator)	(struct asParser_Ctx_struct * ctx);
     asParser_primary_return (*primary)	(struct asParser_Ctx_struct * ctx);
     asParser_selector_return (*selector)	(struct asParser_Ctx_struct * ctx);
     asParser_new_name_return (*new_name)	(struct asParser_Ctx_struct * ctx);
     asParser_new_arguments_return (*new_arguments)	(struct asParser_Ctx_struct * ctx);
     asParser_array_argument_return (*array_argument)	(struct asParser_Ctx_struct * ctx);
     asParser_array_initializer_return (*array_initializer)	(struct asParser_Ctx_struct * ctx);
     asParser_arguments_return (*arguments)	(struct asParser_Ctx_struct * ctx);
     asParser_type_list_return (*type_list)	(struct asParser_Ctx_struct * ctx);
     asParser_type_return (*type)	(struct asParser_Ctx_struct * ctx);
     asParser_type_argument_return (*type_argument)	(struct asParser_Ctx_struct * ctx);
     asParser_array_decl_return (*array_decl)	(struct asParser_Ctx_struct * ctx);
     asParser_basictype_return (*basictype)	(struct asParser_Ctx_struct * ctx);
     asParser_literal_return (*literal)	(struct asParser_Ctx_struct * ctx);
     asParser_numeric_literal_return (*numeric_literal)	(struct asParser_Ctx_struct * ctx);
     asParser_boolean_literal_return (*boolean_literal)	(struct asParser_Ctx_struct * ctx);
     asParser_identifier_return (*identifier)	(struct asParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred10_as)	(struct asParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred37_as)	(struct asParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred39_as)	(struct asParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred81_as)	(struct asParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred85_as)	(struct asParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred88_as)	(struct asParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred97_as)	(struct asParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred100_as)	(struct asParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred102_as)	(struct asParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred103_as)	(struct asParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred106_as)	(struct asParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred109_as)	(struct asParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct asParser_Ctx_struct * ctx);
    void	    (*free)   (struct asParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pasParser asParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pasParser asParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EOF      -1
#define T__113      113
#define T__114      114
#define T__115      115
#define T__116      116
#define T__117      117
#define T__118      118
#define T__119      119
#define T__120      120
#define T__121      121
#define T__122      122
#define T__123      123
#define T__124      124
#define T__125      125
#define IFACE_MEMBER      4
#define IFACE_VOID_MEMBER      5
#define TYPEINFOS      6
#define TYPEINFO      7
#define COMPOUNT      8
#define BLOCK      9
#define MODIFIERS      10
#define CONSTRUCTOR_DECL      11
#define FUNCTION_DECL      12
#define FUNCTION_ARGUMENTS      13
#define VOID_FUNCDECL      14
#define VARIABLE_DECL      15
#define LOCALVARDECL      16
#define STMT_EXPR      17
#define CAST      18
#define ACCESS      19
#define ARRAYACCESS      20
#define CLASSACCESS      21
#define FOR_INIT      22
#define LITERAL      23
#define EXPRESSION      24
#define UNARY      25
#define TYPE      26
#define TYPELIST      27
#define TYPEARGUMENT      28
#define ARGUMENTS      29
#define ARRAYARGUMENTS      30
#define ANNOTATIONS      31
#define ANNOTATION      32
#define PACKAGE      33
#define USE      34
#define CLASS      35
#define EXTENDS      36
#define IMPL      37
#define T_VOID      38
#define INTRFACE      39
#define SUPER      40
#define STATIC      41
#define FINAL      42
#define NATIVE      43
#define ABSTRACT      44
#define PUBLIC      45
#define PRIVATE      46
#define PROT      47
#define IF      48
#define ELSE      49
#define FOR      50
#define FOREACH      51
#define WHILE      52
#define DO      53
#define SWITCH      54
#define RETURN      55
#define TRY      56
#define THROW      57
#define ASSERT      58
#define BREAK      59
#define CONTINUE      60
#define SEP      61
#define CATCH      62
#define FINALLY      63
#define CASE      64
#define DEFAULT      65
#define OR      66
#define AND      67
#define BITOR      68
#define BITXOR      69
#define BITAND      70
#define INST_OF      71
#define EQUAL      72
#define UNEQUAL      73
#define SEQUAL      74
#define SMALLER      75
#define GREATER      76
#define GEQUAL      77
#define SHIFTL      78
#define SHIFTR      79
#define PLUS      80
#define MINUS      81
#define MUL      82
#define DIV      83
#define REM      84
#define NOT      85
#define BITCOMPL      86
#define NEW      87
#define THIS      88
#define T_CHAR      89
#define T_INT      90
#define T_REAL      91
#define T_STRING      92
#define T_BOOL      93
#define STRING      94
#define CHAR      95
#define LITNULL      96
#define INT      97
#define FLOAT      98
#define LITTRUE      99
#define LITFALSE      100
#define ID      101
#define INCR      102
#define DECR      103
#define SYNC      104
#define EXPONENT      105
#define WHITESPACE      106
#define ESC_SEQ      107
#define COMMENT      108
#define LINE_COMMENT      109
#define HEX_DIGIT      110
#define UNICODE_ESC      111
#define OCTAL_ESC      112
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for asParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
