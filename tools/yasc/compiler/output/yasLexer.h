/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : F:\\Devel\\crafter2d\\tools\\yasc\\yas.g
 *     -                            On : 2014-08-14 17:28:41
 *     -                 for the lexer : yasLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
yasLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pyasLexer, which is returned from a call to yasLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pyasLexer are  as follows:
 *
 *  - 
 void
      pyasLexer->T__116(pyasLexer)
 *  - 
 void
      pyasLexer->T__117(pyasLexer)
 *  - 
 void
      pyasLexer->T__118(pyasLexer)
 *  - 
 void
      pyasLexer->T__119(pyasLexer)
 *  - 
 void
      pyasLexer->T__120(pyasLexer)
 *  - 
 void
      pyasLexer->T__121(pyasLexer)
 *  - 
 void
      pyasLexer->T__122(pyasLexer)
 *  - 
 void
      pyasLexer->T__123(pyasLexer)
 *  - 
 void
      pyasLexer->T__124(pyasLexer)
 *  - 
 void
      pyasLexer->T__125(pyasLexer)
 *  - 
 void
      pyasLexer->T__126(pyasLexer)
 *  - 
 void
      pyasLexer->T__127(pyasLexer)
 *  - 
 void
      pyasLexer->T__128(pyasLexer)
 *  - 
 void
      pyasLexer->T_PACKAGE(pyasLexer)
 *  - 
 void
      pyasLexer->USE(pyasLexer)
 *  - 
 void
      pyasLexer->CLASS(pyasLexer)
 *  - 
 void
      pyasLexer->INTRFACE(pyasLexer)
 *  - 
 void
      pyasLexer->SUPER(pyasLexer)
 *  - 
 void
      pyasLexer->THIS(pyasLexer)
 *  - 
 void
      pyasLexer->EXTENDS(pyasLexer)
 *  - 
 void
      pyasLexer->IMPL(pyasLexer)
 *  - 
 void
      pyasLexer->NEW(pyasLexer)
 *  - 
 void
      pyasLexer->INST_OF(pyasLexer)
 *  - 
 void
      pyasLexer->T_ASSERT(pyasLexer)
 *  - 
 void
      pyasLexer->PROPERTY(pyasLexer)
 *  - 
 void
      pyasLexer->FOR(pyasLexer)
 *  - 
 void
      pyasLexer->FOREACH(pyasLexer)
 *  - 
 void
      pyasLexer->WHILE(pyasLexer)
 *  - 
 void
      pyasLexer->DO(pyasLexer)
 *  - 
 void
      pyasLexer->SWITCH(pyasLexer)
 *  - 
 void
      pyasLexer->CASE(pyasLexer)
 *  - 
 void
      pyasLexer->DEFAULT(pyasLexer)
 *  - 
 void
      pyasLexer->BREAK(pyasLexer)
 *  - 
 void
      pyasLexer->CONTINUE(pyasLexer)
 *  - 
 void
      pyasLexer->RETURN(pyasLexer)
 *  - 
 void
      pyasLexer->IF(pyasLexer)
 *  - 
 void
      pyasLexer->ELSE(pyasLexer)
 *  - 
 void
      pyasLexer->TRY(pyasLexer)
 *  - 
 void
      pyasLexer->CATCH(pyasLexer)
 *  - 
 void
      pyasLexer->FINALLY(pyasLexer)
 *  - 
 void
      pyasLexer->THROW(pyasLexer)
 *  - 
 void
      pyasLexer->LITNULL(pyasLexer)
 *  - 
 void
      pyasLexer->LITTRUE(pyasLexer)
 *  - 
 void
      pyasLexer->LITFALSE(pyasLexer)
 *  - 
 void
      pyasLexer->AND(pyasLexer)
 *  - 
 void
      pyasLexer->OR(pyasLexer)
 *  - 
 void
      pyasLexer->MUL(pyasLexer)
 *  - 
 void
      pyasLexer->DIV(pyasLexer)
 *  - 
 void
      pyasLexer->REM(pyasLexer)
 *  - 
 void
      pyasLexer->PLUS(pyasLexer)
 *  - 
 void
      pyasLexer->MINUS(pyasLexer)
 *  - 
 void
      pyasLexer->BITCOMPL(pyasLexer)
 *  - 
 void
      pyasLexer->NOT(pyasLexer)
 *  - 
 void
      pyasLexer->BITAND(pyasLexer)
 *  - 
 void
      pyasLexer->BITOR(pyasLexer)
 *  - 
 void
      pyasLexer->BITXOR(pyasLexer)
 *  - 
 void
      pyasLexer->INCR(pyasLexer)
 *  - 
 void
      pyasLexer->DECR(pyasLexer)
 *  - 
 void
      pyasLexer->EQUAL(pyasLexer)
 *  - 
 void
      pyasLexer->UNEQUAL(pyasLexer)
 *  - 
 void
      pyasLexer->SEQUAL(pyasLexer)
 *  - 
 void
      pyasLexer->SMALLER(pyasLexer)
 *  - 
 void
      pyasLexer->GREATER(pyasLexer)
 *  - 
 void
      pyasLexer->GEQUAL(pyasLexer)
 *  - 
 void
      pyasLexer->SHIFTL(pyasLexer)
 *  - 
 void
      pyasLexer->SHIFTR(pyasLexer)
 *  - 
 void
      pyasLexer->T_CHAR(pyasLexer)
 *  - 
 void
      pyasLexer->T_INT(pyasLexer)
 *  - 
 void
      pyasLexer->T_REAL(pyasLexer)
 *  - 
 void
      pyasLexer->T_STRING(pyasLexer)
 *  - 
 void
      pyasLexer->T_BOOL(pyasLexer)
 *  - 
 void
      pyasLexer->T_VOID(pyasLexer)
 *  - 
 void
      pyasLexer->STATIC(pyasLexer)
 *  - 
 void
      pyasLexer->FINAL(pyasLexer)
 *  - 
 void
      pyasLexer->ABSTRACT(pyasLexer)
 *  - 
 void
      pyasLexer->NATIVE(pyasLexer)
 *  - 
 void
      pyasLexer->SYNC(pyasLexer)
 *  - 
 void
      pyasLexer->PUBLIC(pyasLexer)
 *  - 
 void
      pyasLexer->PROT(pyasLexer)
 *  - 
 void
      pyasLexer->PRIVATE(pyasLexer)
 *  - 
 void
      pyasLexer->SEP(pyasLexer)
 *  - 
 void
      pyasLexer->ID(pyasLexer)
 *  - 
 void
      pyasLexer->INT(pyasLexer)
 *  - 
 void
      pyasLexer->FLOAT(pyasLexer)
 *  - 
 void
      pyasLexer->WHITESPACE(pyasLexer)
 *  - 
 void
      pyasLexer->STRING(pyasLexer)
 *  - 
 void
      pyasLexer->CHAR(pyasLexer)
 *  - 
 void
      pyasLexer->COMMENT(pyasLexer)
 *  - 
 void
      pyasLexer->LINE_COMMENT(pyasLexer)
 *  - 
 void
      pyasLexer->EXPONENT(pyasLexer)
 *  - 
 void
      pyasLexer->HEX_DIGIT(pyasLexer)
 *  - 
 void
      pyasLexer->ESC_SEQ(pyasLexer)
 *  - 
 void
      pyasLexer->OCTAL_ESC(pyasLexer)
 *  - 
 void
      pyasLexer->UNICODE_ESC(pyasLexer)
 *  - 
 void
      pyasLexer->Tokens(pyasLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_yasLexer_H
#define _yasLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct yasLexer_Ctx_struct yasLexer, * pyasLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
yasLexer

 */
struct yasLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__116)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT__117)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT__118)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT__119)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT__120)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT__121)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT__122)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT__123)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT__124)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT__125)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT__126)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT__127)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT__128)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT_PACKAGE)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mUSE)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mCLASS)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mINTRFACE)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mSUPER)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mTHIS)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mEXTENDS)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mIMPL)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mNEW)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mINST_OF)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT_ASSERT)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mPROPERTY)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mFOR)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mFOREACH)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mWHILE)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mDO)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mSWITCH)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mCASE)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mDEFAULT)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mBREAK)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mCONTINUE)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mRETURN)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mIF)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mELSE)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mTRY)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mCATCH)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mFINALLY)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mTHROW)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mLITNULL)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mLITTRUE)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mLITFALSE)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mAND)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mOR)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mMUL)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mDIV)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mREM)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mBITCOMPL)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mNOT)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mBITAND)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mBITOR)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mBITXOR)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mINCR)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mDECR)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mEQUAL)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mUNEQUAL)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mSEQUAL)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mSMALLER)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mGREATER)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mGEQUAL)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mSHIFTL)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mSHIFTR)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT_CHAR)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT_INT)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT_REAL)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT_STRING)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT_BOOL)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mT_VOID)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mSTATIC)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mFINAL)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mABSTRACT)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mNATIVE)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mSYNC)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mPUBLIC)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mPROT)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mPRIVATE)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mSEP)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mID)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mINT)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mFLOAT)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mWHITESPACE)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mCHAR)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mCOMMENT)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mLINE_COMMENT)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mEXPONENT)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGIT)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mESC_SEQ)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mOCTAL_ESC)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mUNICODE_ESC)	(struct yasLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct yasLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct yasLexer_Ctx_struct * ctx);
    void	    (*free)   (struct yasLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pyasLexer yasLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pyasLexer yasLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__116      116
#define T__117      117
#define T__118      118
#define T__119      119
#define T__120      120
#define T__121      121
#define T__122      122
#define T__123      123
#define T__124      124
#define T__125      125
#define T__126      126
#define T__127      127
#define T__128      128
#define ABSTRACT      4
#define ACCESS      5
#define AND      6
#define ANNOTATION      7
#define ANNOTATIONS      8
#define ARGUMENTS      9
#define ARRAYACCESS      10
#define ARRAYARGUMENTS      11
#define ARRAYINIT      12
#define BITAND      13
#define BITCOMPL      14
#define BITOR      15
#define BITXOR      16
#define BLOCK      17
#define BREAK      18
#define CASE      19
#define CAST      20
#define CATCH      21
#define CHAR      22
#define CLASS      23
#define CLASSACCESS      24
#define COMMENT      25
#define COMPOUNT      26
#define CONSTRUCTOR_DECL      27
#define CONTINUE      28
#define DECR      29
#define DEFAULT      30
#define DIV      31
#define DO      32
#define ELSE      33
#define EQUAL      34
#define ESC_SEQ      35
#define EXPONENT      36
#define EXPRESSION      37
#define EXTENDS      38
#define FINAL      39
#define FINALLY      40
#define FLOAT      41
#define FOR      42
#define FOREACH      43
#define FOR_INIT      44
#define FUNCTION_ARGUMENTS      45
#define FUNCTION_DECL      46
#define GEQUAL      47
#define GREATER      48
#define HEX_DIGIT      49
#define ID      50
#define IF      51
#define IFACE_MEMBER      52
#define IFACE_VOID_MEMBER      53
#define IMPL      54
#define INCR      55
#define INST_OF      56
#define INT      57
#define INTRFACE      58
#define LINE_COMMENT      59
#define LITERAL      60
#define LITFALSE      61
#define LITNULL      62
#define LITTRUE      63
#define LOCALVARDECL      64
#define MINUS      65
#define MODIFIERS      66
#define MUL      67
#define NATIVE      68
#define NEW      69
#define NOT      70
#define OCTAL_ESC      71
#define OR      72
#define PLUS      73
#define PRIVATE      74
#define PROPERTY      75
#define PROPERTY_DECL      76
#define PROT      77
#define PUBLIC      78
#define REM      79
#define RETURN      80
#define SEP      81
#define SEQUAL      82
#define SHIFTL      83
#define SHIFTR      84
#define SMALLER      85
#define STATIC      86
#define STMT_EXPR      87
#define STRING      88
#define SUPER      89
#define SWITCH      90
#define SYNC      91
#define THIS      92
#define THROW      93
#define TRY      94
#define TYPE      95
#define TYPEARGUMENT      96
#define TYPEINFO      97
#define TYPEINFOS      98
#define TYPELIST      99
#define T_ASSERT      100
#define T_BOOL      101
#define T_CHAR      102
#define T_INT      103
#define T_PACKAGE      104
#define T_REAL      105
#define T_STRING      106
#define T_VOID      107
#define UNARY      108
#define UNEQUAL      109
#define UNICODE_ESC      110
#define USE      111
#define VARIABLE_DECL      112
#define VOID_FUNCDECL      113
#define WHILE      114
#define WHITESPACE      115
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for yasLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
