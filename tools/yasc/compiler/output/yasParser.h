/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : F:\\Devel\\crafter2d\\tools\\yasc\\yas.g
 *     -                            On : 2014-08-14 17:28:40
 *     -                for the parser : yasParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
yasParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pyasParser, which is returned from a call to yasParserNew().
 *
 * The methods in pyasParser are  as follows:
 *
 *  - 
 yasParser_script_return
      pyasParser->script(pyasParser)
 *  - 
 yasParser_declaration_return
      pyasParser->declaration(pyasParser)
 *  - 
 yasParser_package_decl_return
      pyasParser->package_decl(pyasParser)
 *  - 
 yasParser_use_decl_return
      pyasParser->use_decl(pyasParser)
 *  - 
 yasParser_use_identifier_return
      pyasParser->use_identifier(pyasParser)
 *  - 
 yasParser_type_decl_return
      pyasParser->type_decl(pyasParser)
 *  - 
 yasParser_class_decl_return
      pyasParser->class_decl(pyasParser)
 *  - 
 yasParser_class_inheritance_return
      pyasParser->class_inheritance(pyasParser)
 *  - 
 yasParser_class_member_return
      pyasParser->class_member(pyasParser)
 *  - 
 yasParser_class_var_decl_return
      pyasParser->class_var_decl(pyasParser)
 *  - 
 yasParser_class_property_decl_return
      pyasParser->class_property_decl(pyasParser)
 *  - 
 yasParser_class_func_decl_return
      pyasParser->class_func_decl(pyasParser)
 *  - 
 yasParser_member_decl_rest_return
      pyasParser->member_decl_rest(pyasParser)
 *  - 
 yasParser_interface_decl_return
      pyasParser->interface_decl(pyasParser)
 *  - 
 yasParser_iface_inheritance_return
      pyasParser->iface_inheritance(pyasParser)
 *  - 
 yasParser_iface_member_return
      pyasParser->iface_member(pyasParser)
 *  - 
 yasParser_iface_func_field_return
      pyasParser->iface_func_field(pyasParser)
 *  - 
 yasParser_typeinfos_return
      pyasParser->typeinfos(pyasParser)
 *  - 
 yasParser_typeinfo_return
      pyasParser->typeinfo(pyasParser)
 *  - 
 yasParser_func_arguments_return
      pyasParser->func_arguments(pyasParser)
 *  - 
 yasParser_func_arg_decl_return
      pyasParser->func_arg_decl(pyasParser)
 *  - 
 yasParser_variables_decl_return
      pyasParser->variables_decl(pyasParser)
 *  - 
 yasParser_variable_init_return
      pyasParser->variable_init(pyasParser)
 *  - 
 yasParser_array_init_return
      pyasParser->array_init(pyasParser)
 *  - 
 yasParser_modifiers_return
      pyasParser->modifiers(pyasParser)
 *  - 
 yasParser_modifier_return
      pyasParser->modifier(pyasParser)
 *  - 
 yasParser_annotations_return
      pyasParser->annotations(pyasParser)
 *  - 
 yasParser_annotation_return
      pyasParser->annotation(pyasParser)
 *  - 
 yasParser_annotation_arguments_return
      pyasParser->annotation_arguments(pyasParser)
 *  - 
 yasParser_block_return
      pyasParser->block(pyasParser)
 *  - 
 yasParser_block_stmt_return
      pyasParser->block_stmt(pyasParser)
 *  - 
 yasParser_stmt_return
      pyasParser->stmt(pyasParser)
 *  - 
 yasParser_for_declaration_return
      pyasParser->for_declaration(pyasParser)
 *  - 
 yasParser_for_init_return
      pyasParser->for_init(pyasParser)
 *  - 
 yasParser_catch_block_return
      pyasParser->catch_block(pyasParser)
 *  - 
 yasParser_finally_block_return
      pyasParser->finally_block(pyasParser)
 *  - 
 yasParser_switch_case_return
      pyasParser->switch_case(pyasParser)
 *  - 
 yasParser_local_var_decl_return
      pyasParser->local_var_decl(pyasParser)
 *  - 
 yasParser_stmt_expression_return
      pyasParser->stmt_expression(pyasParser)
 *  - 
 yasParser_compound_expression_return
      pyasParser->compound_expression(pyasParser)
 *  - 
 yasParser_expression_list_return
      pyasParser->expression_list(pyasParser)
 *  - 
 yasParser_expression_return
      pyasParser->expression(pyasParser)
 *  - 
 yasParser_assignment_operator_return
      pyasParser->assignment_operator(pyasParser)
 *  - 
 yasParser_or_expression_return
      pyasParser->or_expression(pyasParser)
 *  - 
 yasParser_and_expression_return
      pyasParser->and_expression(pyasParser)
 *  - 
 yasParser_bit_or_expression_return
      pyasParser->bit_or_expression(pyasParser)
 *  - 
 yasParser_bit_xor_expression_return
      pyasParser->bit_xor_expression(pyasParser)
 *  - 
 yasParser_bit_and_expression_return
      pyasParser->bit_and_expression(pyasParser)
 *  - 
 yasParser_instanceof_expression_return
      pyasParser->instanceof_expression(pyasParser)
 *  - 
 yasParser_equal_expression_return
      pyasParser->equal_expression(pyasParser)
 *  - 
 yasParser_relational_expression_return
      pyasParser->relational_expression(pyasParser)
 *  - 
 yasParser_relational_operator_return
      pyasParser->relational_operator(pyasParser)
 *  - 
 yasParser_shift_expression_return
      pyasParser->shift_expression(pyasParser)
 *  - 
 yasParser_additive_expression_return
      pyasParser->additive_expression(pyasParser)
 *  - 
 yasParser_multiplicative_expression_return
      pyasParser->multiplicative_expression(pyasParser)
 *  - 
 yasParser_unary_expression_return
      pyasParser->unary_expression(pyasParser)
 *  - 
 yasParser_unary_pre_operator_return
      pyasParser->unary_pre_operator(pyasParser)
 *  - 
 yasParser_unary_post_oparator_return
      pyasParser->unary_post_oparator(pyasParser)
 *  - 
 yasParser_primary_return
      pyasParser->primary(pyasParser)
 *  - 
 yasParser_selector_return
      pyasParser->selector(pyasParser)
 *  - 
 yasParser_new_name_return
      pyasParser->new_name(pyasParser)
 *  - 
 yasParser_new_arguments_return
      pyasParser->new_arguments(pyasParser)
 *  - 
 yasParser_array_argument_return
      pyasParser->array_argument(pyasParser)
 *  - 
 yasParser_arguments_return
      pyasParser->arguments(pyasParser)
 *  - 
 yasParser_type_list_return
      pyasParser->type_list(pyasParser)
 *  - 
 yasParser_type_return
      pyasParser->type(pyasParser)
 *  - 
 yasParser_type_argument_return
      pyasParser->type_argument(pyasParser)
 *  - 
 yasParser_array_decl_return
      pyasParser->array_decl(pyasParser)
 *  - 
 yasParser_basictype_return
      pyasParser->basictype(pyasParser)
 *  - 
 yasParser_literal_return
      pyasParser->literal(pyasParser)
 *  - 
 yasParser_numeric_literal_return
      pyasParser->numeric_literal(pyasParser)
 *  - 
 yasParser_boolean_literal_return
      pyasParser->boolean_literal(pyasParser)
 *  - 
 yasParser_identifier_return
      pyasParser->identifier(pyasParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_yasParser_H
#define _yasParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct yasParser_Ctx_struct yasParser, * pyasParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct yasParser_script_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_script_return;



typedef struct yasParser_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_declaration_return;



typedef struct yasParser_package_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_package_decl_return;



typedef struct yasParser_use_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_use_decl_return;



typedef struct yasParser_use_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_use_identifier_return;



typedef struct yasParser_type_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_type_decl_return;



typedef struct yasParser_class_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_class_decl_return;



typedef struct yasParser_class_inheritance_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_class_inheritance_return;



typedef struct yasParser_class_member_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_class_member_return;



typedef struct yasParser_class_var_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_class_var_decl_return;



typedef struct yasParser_class_property_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_class_property_decl_return;



typedef struct yasParser_class_func_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_class_func_decl_return;



typedef struct yasParser_member_decl_rest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_member_decl_rest_return;



typedef struct yasParser_interface_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_interface_decl_return;



typedef struct yasParser_iface_inheritance_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_iface_inheritance_return;



typedef struct yasParser_iface_member_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_iface_member_return;



typedef struct yasParser_iface_func_field_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_iface_func_field_return;



typedef struct yasParser_typeinfos_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_typeinfos_return;



typedef struct yasParser_typeinfo_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_typeinfo_return;



typedef struct yasParser_func_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_func_arguments_return;



typedef struct yasParser_func_arg_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_func_arg_decl_return;



typedef struct yasParser_variables_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_variables_decl_return;



typedef struct yasParser_variable_init_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_variable_init_return;



typedef struct yasParser_array_init_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_array_init_return;



typedef struct yasParser_modifiers_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_modifiers_return;



typedef struct yasParser_modifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_modifier_return;



typedef struct yasParser_annotations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_annotations_return;



typedef struct yasParser_annotation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_annotation_return;



typedef struct yasParser_annotation_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_annotation_arguments_return;



typedef struct yasParser_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_block_return;



typedef struct yasParser_block_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_block_stmt_return;



typedef struct yasParser_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_stmt_return;



typedef struct yasParser_for_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_for_declaration_return;



typedef struct yasParser_for_init_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_for_init_return;



typedef struct yasParser_catch_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_catch_block_return;



typedef struct yasParser_finally_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_finally_block_return;



typedef struct yasParser_switch_case_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_switch_case_return;



typedef struct yasParser_local_var_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_local_var_decl_return;



typedef struct yasParser_stmt_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_stmt_expression_return;



typedef struct yasParser_compound_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_compound_expression_return;



typedef struct yasParser_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_expression_list_return;



typedef struct yasParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_expression_return;



typedef struct yasParser_assignment_operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_assignment_operator_return;



typedef struct yasParser_or_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_or_expression_return;



typedef struct yasParser_and_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_and_expression_return;



typedef struct yasParser_bit_or_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_bit_or_expression_return;



typedef struct yasParser_bit_xor_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_bit_xor_expression_return;



typedef struct yasParser_bit_and_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_bit_and_expression_return;



typedef struct yasParser_instanceof_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_instanceof_expression_return;



typedef struct yasParser_equal_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_equal_expression_return;



typedef struct yasParser_relational_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_relational_expression_return;



typedef struct yasParser_relational_operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_relational_operator_return;



typedef struct yasParser_shift_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_shift_expression_return;



typedef struct yasParser_additive_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_additive_expression_return;



typedef struct yasParser_multiplicative_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_multiplicative_expression_return;



typedef struct yasParser_unary_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_unary_expression_return;



typedef struct yasParser_unary_pre_operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_unary_pre_operator_return;



typedef struct yasParser_unary_post_oparator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_unary_post_oparator_return;



typedef struct yasParser_primary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_primary_return;



typedef struct yasParser_selector_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_selector_return;



typedef struct yasParser_new_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_new_name_return;



typedef struct yasParser_new_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_new_arguments_return;



typedef struct yasParser_array_argument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_array_argument_return;



typedef struct yasParser_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_arguments_return;



typedef struct yasParser_type_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_type_list_return;



typedef struct yasParser_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_type_return;



typedef struct yasParser_type_argument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_type_argument_return;



typedef struct yasParser_array_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_array_decl_return;



typedef struct yasParser_basictype_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_basictype_return;



typedef struct yasParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_literal_return;



typedef struct yasParser_numeric_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_numeric_literal_return;



typedef struct yasParser_boolean_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_boolean_literal_return;



typedef struct yasParser_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    yasParser_identifier_return;




/** Context tracking structure for 
yasParser

 */
struct yasParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     yasParser_script_return
     (*script)	(struct yasParser_Ctx_struct * ctx);

     yasParser_declaration_return
     (*declaration)	(struct yasParser_Ctx_struct * ctx);

     yasParser_package_decl_return
     (*package_decl)	(struct yasParser_Ctx_struct * ctx);

     yasParser_use_decl_return
     (*use_decl)	(struct yasParser_Ctx_struct * ctx);

     yasParser_use_identifier_return
     (*use_identifier)	(struct yasParser_Ctx_struct * ctx);

     yasParser_type_decl_return
     (*type_decl)	(struct yasParser_Ctx_struct * ctx);

     yasParser_class_decl_return
     (*class_decl)	(struct yasParser_Ctx_struct * ctx);

     yasParser_class_inheritance_return
     (*class_inheritance)	(struct yasParser_Ctx_struct * ctx);

     yasParser_class_member_return
     (*class_member)	(struct yasParser_Ctx_struct * ctx);

     yasParser_class_var_decl_return
     (*class_var_decl)	(struct yasParser_Ctx_struct * ctx);

     yasParser_class_property_decl_return
     (*class_property_decl)	(struct yasParser_Ctx_struct * ctx);

     yasParser_class_func_decl_return
     (*class_func_decl)	(struct yasParser_Ctx_struct * ctx);

     yasParser_member_decl_rest_return
     (*member_decl_rest)	(struct yasParser_Ctx_struct * ctx);

     yasParser_interface_decl_return
     (*interface_decl)	(struct yasParser_Ctx_struct * ctx);

     yasParser_iface_inheritance_return
     (*iface_inheritance)	(struct yasParser_Ctx_struct * ctx);

     yasParser_iface_member_return
     (*iface_member)	(struct yasParser_Ctx_struct * ctx);

     yasParser_iface_func_field_return
     (*iface_func_field)	(struct yasParser_Ctx_struct * ctx);

     yasParser_typeinfos_return
     (*typeinfos)	(struct yasParser_Ctx_struct * ctx);

     yasParser_typeinfo_return
     (*typeinfo)	(struct yasParser_Ctx_struct * ctx);

     yasParser_func_arguments_return
     (*func_arguments)	(struct yasParser_Ctx_struct * ctx);

     yasParser_func_arg_decl_return
     (*func_arg_decl)	(struct yasParser_Ctx_struct * ctx);

     yasParser_variables_decl_return
     (*variables_decl)	(struct yasParser_Ctx_struct * ctx);

     yasParser_variable_init_return
     (*variable_init)	(struct yasParser_Ctx_struct * ctx);

     yasParser_array_init_return
     (*array_init)	(struct yasParser_Ctx_struct * ctx);

     yasParser_modifiers_return
     (*modifiers)	(struct yasParser_Ctx_struct * ctx);

     yasParser_modifier_return
     (*modifier)	(struct yasParser_Ctx_struct * ctx);

     yasParser_annotations_return
     (*annotations)	(struct yasParser_Ctx_struct * ctx);

     yasParser_annotation_return
     (*annotation)	(struct yasParser_Ctx_struct * ctx);

     yasParser_annotation_arguments_return
     (*annotation_arguments)	(struct yasParser_Ctx_struct * ctx);

     yasParser_block_return
     (*block)	(struct yasParser_Ctx_struct * ctx);

     yasParser_block_stmt_return
     (*block_stmt)	(struct yasParser_Ctx_struct * ctx);

     yasParser_stmt_return
     (*stmt)	(struct yasParser_Ctx_struct * ctx);

     yasParser_for_declaration_return
     (*for_declaration)	(struct yasParser_Ctx_struct * ctx);

     yasParser_for_init_return
     (*for_init)	(struct yasParser_Ctx_struct * ctx);

     yasParser_catch_block_return
     (*catch_block)	(struct yasParser_Ctx_struct * ctx);

     yasParser_finally_block_return
     (*finally_block)	(struct yasParser_Ctx_struct * ctx);

     yasParser_switch_case_return
     (*switch_case)	(struct yasParser_Ctx_struct * ctx);

     yasParser_local_var_decl_return
     (*local_var_decl)	(struct yasParser_Ctx_struct * ctx);

     yasParser_stmt_expression_return
     (*stmt_expression)	(struct yasParser_Ctx_struct * ctx);

     yasParser_compound_expression_return
     (*compound_expression)	(struct yasParser_Ctx_struct * ctx);

     yasParser_expression_list_return
     (*expression_list)	(struct yasParser_Ctx_struct * ctx);

     yasParser_expression_return
     (*expression)	(struct yasParser_Ctx_struct * ctx);

     yasParser_assignment_operator_return
     (*assignment_operator)	(struct yasParser_Ctx_struct * ctx);

     yasParser_or_expression_return
     (*or_expression)	(struct yasParser_Ctx_struct * ctx);

     yasParser_and_expression_return
     (*and_expression)	(struct yasParser_Ctx_struct * ctx);

     yasParser_bit_or_expression_return
     (*bit_or_expression)	(struct yasParser_Ctx_struct * ctx);

     yasParser_bit_xor_expression_return
     (*bit_xor_expression)	(struct yasParser_Ctx_struct * ctx);

     yasParser_bit_and_expression_return
     (*bit_and_expression)	(struct yasParser_Ctx_struct * ctx);

     yasParser_instanceof_expression_return
     (*instanceof_expression)	(struct yasParser_Ctx_struct * ctx);

     yasParser_equal_expression_return
     (*equal_expression)	(struct yasParser_Ctx_struct * ctx);

     yasParser_relational_expression_return
     (*relational_expression)	(struct yasParser_Ctx_struct * ctx);

     yasParser_relational_operator_return
     (*relational_operator)	(struct yasParser_Ctx_struct * ctx);

     yasParser_shift_expression_return
     (*shift_expression)	(struct yasParser_Ctx_struct * ctx);

     yasParser_additive_expression_return
     (*additive_expression)	(struct yasParser_Ctx_struct * ctx);

     yasParser_multiplicative_expression_return
     (*multiplicative_expression)	(struct yasParser_Ctx_struct * ctx);

     yasParser_unary_expression_return
     (*unary_expression)	(struct yasParser_Ctx_struct * ctx);

     yasParser_unary_pre_operator_return
     (*unary_pre_operator)	(struct yasParser_Ctx_struct * ctx);

     yasParser_unary_post_oparator_return
     (*unary_post_oparator)	(struct yasParser_Ctx_struct * ctx);

     yasParser_primary_return
     (*primary)	(struct yasParser_Ctx_struct * ctx);

     yasParser_selector_return
     (*selector)	(struct yasParser_Ctx_struct * ctx);

     yasParser_new_name_return
     (*new_name)	(struct yasParser_Ctx_struct * ctx);

     yasParser_new_arguments_return
     (*new_arguments)	(struct yasParser_Ctx_struct * ctx);

     yasParser_array_argument_return
     (*array_argument)	(struct yasParser_Ctx_struct * ctx);

     yasParser_arguments_return
     (*arguments)	(struct yasParser_Ctx_struct * ctx);

     yasParser_type_list_return
     (*type_list)	(struct yasParser_Ctx_struct * ctx);

     yasParser_type_return
     (*type)	(struct yasParser_Ctx_struct * ctx);

     yasParser_type_argument_return
     (*type_argument)	(struct yasParser_Ctx_struct * ctx);

     yasParser_array_decl_return
     (*array_decl)	(struct yasParser_Ctx_struct * ctx);

     yasParser_basictype_return
     (*basictype)	(struct yasParser_Ctx_struct * ctx);

     yasParser_literal_return
     (*literal)	(struct yasParser_Ctx_struct * ctx);

     yasParser_numeric_literal_return
     (*numeric_literal)	(struct yasParser_Ctx_struct * ctx);

     yasParser_boolean_literal_return
     (*boolean_literal)	(struct yasParser_Ctx_struct * ctx);

     yasParser_identifier_return
     (*identifier)	(struct yasParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred4_yas)	(struct yasParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred12_yas)	(struct yasParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred13_yas)	(struct yasParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred44_yas)	(struct yasParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred46_yas)	(struct yasParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred94_yas)	(struct yasParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred106_yas)	(struct yasParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred115_yas)	(struct yasParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred119_yas)	(struct yasParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred122_yas)	(struct yasParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct yasParser_Ctx_struct * ctx);
    void	    (*free)   (struct yasParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pyasParser yasParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pyasParser yasParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__116      116
#define T__117      117
#define T__118      118
#define T__119      119
#define T__120      120
#define T__121      121
#define T__122      122
#define T__123      123
#define T__124      124
#define T__125      125
#define T__126      126
#define T__127      127
#define T__128      128
#define ABSTRACT      4
#define ACCESS      5
#define AND      6
#define ANNOTATION      7
#define ANNOTATIONS      8
#define ARGUMENTS      9
#define ARRAYACCESS      10
#define ARRAYARGUMENTS      11
#define ARRAYINIT      12
#define BITAND      13
#define BITCOMPL      14
#define BITOR      15
#define BITXOR      16
#define BLOCK      17
#define BREAK      18
#define CASE      19
#define CAST      20
#define CATCH      21
#define CHAR      22
#define CLASS      23
#define CLASSACCESS      24
#define COMMENT      25
#define COMPOUNT      26
#define CONSTRUCTOR_DECL      27
#define CONTINUE      28
#define DECR      29
#define DEFAULT      30
#define DIV      31
#define DO      32
#define ELSE      33
#define EQUAL      34
#define ESC_SEQ      35
#define EXPONENT      36
#define EXPRESSION      37
#define EXTENDS      38
#define FINAL      39
#define FINALLY      40
#define FLOAT      41
#define FOR      42
#define FOREACH      43
#define FOR_INIT      44
#define FUNCTION_ARGUMENTS      45
#define FUNCTION_DECL      46
#define GEQUAL      47
#define GREATER      48
#define HEX_DIGIT      49
#define ID      50
#define IF      51
#define IFACE_MEMBER      52
#define IFACE_VOID_MEMBER      53
#define IMPL      54
#define INCR      55
#define INST_OF      56
#define INT      57
#define INTRFACE      58
#define LINE_COMMENT      59
#define LITERAL      60
#define LITFALSE      61
#define LITnullptr      62
#define LITTRUE      63
#define LOCALVARDECL      64
#define MINUS      65
#define MODIFIERS      66
#define MUL      67
#define NATIVE      68
#define NEW      69
#define NOT      70
#define OCTAL_ESC      71
#define OR      72
#define PLUS      73
#define PRIVATE      74
#define PROPERTY      75
#define PROPERTY_DECL      76
#define PROT      77
#define PUBLIC      78
#define REM      79
#define RETURN      80
#define SEP      81
#define SEQUAL      82
#define SHIFTL      83
#define SHIFTR      84
#define SMALLER      85
#define STATIC      86
#define STMT_EXPR      87
#define STRING      88
#define SUPER      89
#define SWITCH      90
#define SYNC      91
#define THIS      92
#define THROW      93
#define TRY      94
#define TYPE      95
#define TYPEARGUMENT      96
#define TYPEINFO      97
#define TYPEINFOS      98
#define TYPELIST      99
#define T_ASSERT      100
#define T_BOOL      101
#define T_CHAR      102
#define T_INT      103
#define T_PACKAGE      104
#define T_REAL      105
#define T_STRING      106
#define T_VOID      107
#define UNARY      108
#define UNEQUAL      109
#define UNICODE_ESC      110
#define USE      111
#define VARIABLE_DECL      112
#define VOID_FUNCDECL      113
#define WHILE      114
#define WHITESPACE      115
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for yasParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
